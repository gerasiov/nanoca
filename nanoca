#!/bin/sh
# nanoca -- Certificate Authority tool
#
# Copyright (C) 2008 Alexander GQ Gerasiov <gq@cs.msu.su>
#
# This program is free software.  It is distributed under the terms of
# the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

set -e

# Basic configs
BASE=""
COUNTRY="RU"
PROVINCE=""
CITY="Moscow"
ORGANIZATION="MMM corp."
UNIT=""
CNAME=""
EMAIL=""

CA_DAYS=3653
CA_KEY="rsa:4096"
CERT_DAYS=1096
CERT_KEY="rsa:2048"
CERT_TYPE="server"
CONFIG_DIR="config"
BATCH=""
FILTER_TYPE=""

# Read user's config
if [ -f "${HOME}/.nanoca" ];then
	. "${HOME}/.nanoca"
fi

export BASE COUNTRY PROVINCE CITY ORGANIZATION UNIT CNAME EMAIL

COMMAND_NAME="nanoca"

CONFIG="${CONFIG_DIR}/openssl.cnf"

# Create certificate request.
create_req(){
	NAME="$1"
	test -n "$CNAME"||CNAME="$NAME"
	CSR="${BASE}/req/${NAME}.csr"
	KEY="${BASE}/private/${NAME}.pem"

	if [ -z "$NAME" ];then
		echo "Aborted: empty name specified."
		exit 1
	fi

	if [ -e "$CSR" ];then
		echo "Aborted: certificate already exists."
		exit 1
	fi

	openssl req -config "$CONFIG" -new -newkey "$CERT_KEY" -keyout "$KEY" -out "$CSR" -nodes $BATCH&&\
	echo "Done."||\
	{ echo "Failed."; exit 1; }
	echo "$CERT_TYPE" > "${BASE}/req/${NAME}.type"
}

# Sign certificate request
sign_cert(){
	NAME="$1"

	CSR="${BASE}/req/${NAME}.csr"
	CERT="${BASE}/certs/${NAME}.pem"

	if [ -z "$NAME" ];then
		echo "Aborted: empty name specified."
		exit 1
	fi

	if [ ! -f "$CSR" ];then
		echo "Aborted: certificate request not found."
		exit 1
	fi

# todo: allow user to override this crap when signing?
	if [ -f "${BASE}/req/${NAME}.type" ];then
		CERT_TYPE="$(cat "${BASE}/req/${NAME}.type")"
	fi

	#  sign the certificate
	echo "CA signing: $CSR -> $CERT"

	openssl ca -config "$CONFIG" $BATCH -extensions "$CERT_TYPE" -extfile "${CONFIG_DIR}/${CERT_TYPE}.cnf" -out "$CERT" -infiles "$CSR" ||{ echo "Error occured."; exit 1; }

	echo "CA verifying: $CERT <-> CA cert"
	openssl verify -CAfile "${BASE}/cacert.pem" "$CERT"
}

# Generate nanoca config
create_config(){
	echo  -e '\nBASE="'$(cd "$PARAMETER"&&pwd)'"' > ${HOME}/.nanoca
	echo "TODO: Parse the following line and push this into nanoca config."
	openssl x509 -subject -in ${BASE}/cacert.pem -noout
}

# Initialize openssl infrastructure
db_init(){
	if [ -z "BASE" ];then
		echo "Aborted: empty directory name specified."
		exit 1
	fi

	if [ -e "$BASE" ];then
		echo "Aborted: directory allready exists."
		exit 1
	fi

	mkdir -p "$BASE"
	mkdir "${BASE}/req" "${BASE}/certs" "${BASE}/newcerts" "${BASE}/private"
	chmod 700 "${BASE}/private"

	touch "${BASE}/index.txt" "${BASE}/index.txt.attr"
	echo "00" > "${BASE}/serial"
}

# Create certificate authority
create_ca(){
	openssl req -new -newkey $CA_KEY -x509 -extensions v3_ca -keyout "${BASE}/private/cakey.pem" -out "${BASE}/cacert.pem" -days $CA_DAYS -config "$CONFIG"
}

#FIXME: add --brief support, and make list_ to use show_

# Print certificate in plain text
show_cert(){
	NAME="$1"
	if [ ! -f "${BASE}/req/${NAME}.pem" ];then
		echo "Aborted: no such certificate."
		exit 1
	fi

	openssl x509 -in "${BASE}/certs/${NAME}.pem" -text
}

show_req(){
	NAME="$1"
	if [ ! -f "${BASE}/req/${NAME}.crl" ];then
		echo "Aborted: no such certificate request."
		exit 1
	fi

	openssl req -in "${BASE}/req/${NAME}.crl" -text
}

list_certs(){
	for FILE in "${BASE}/certs/"*.pem; do
		test -f "$FILE"||break
		test -s "$FILE"||continue

		NAME="${FILE#${BASE}/certs/}"
		NAME="${NAME%.pem}"
		SUBJECT="$(openssl x509 -in "$FILE" -subject -noout)"
#FIXME: type may differ from one, specified in request :( or not?
		TYPE="$(cat "${BASE}/req/${NAME}.type")"

		test -z "$FILTER_TYPE" -o "$FILTER_TYPE" = "$TYPE"&&\
		echo -e "\t$NAME\t$TYPE\t${SUBJECT#subject=}"||true
	done	
}

list_reqs(){
	for FILE in "${BASE}/req/"*.csr; do
		test -f "$FILE"||break
		test -s "$FILE"||continue

		NAME="${FILE#${BASE}/req/}"
		NAME="${NAME%.csr}"
		SUBJECT="$(openssl req -in "$FILE" -subject -noout)"
		TYPE="$(cat "${BASE}/req/${NAME}.type")"

		test -z "$FILTER_TYPE" -o "$FILTER_TYPE" = "$TYPE"&&\
		echo -e "\t$NAME\t$TYPE\t${SUBJECT#subject=}"||true
	done
}

#Remove request
rm_req(){
	echo "I'm not implemented yet."
	#Do some checks..
}

search(){
	 list_reqs | grep --label=req --null --with-filename --extended-regexp -- "$PARAMETER"
	 list_certs | grep --label=cert --null --with-filename --extended-regexp -- "$PARAMETER"
}

usage(){
	echo >&2
	echo "Usage:" >&2
	echo "$COMMAND_NAME [options] operation [parameter]" >&2
	echo >&2
	echo "Operations could be:" >&2
	echo "init <path>" >&2
	echo "create [--type <type>] [--key <alg:length>] <cert-name>" >&2
	echo "request [--type <type>] [--key <alg:length>] <cert-name>" >&2
	echo "sign <cert-name>" >&2
	echo "show-cert [--brief] <name>" >&2
	echo "show-req [--brief] <name>" >&2
	echo "list-certs [--type <type>]" >&2
	echo "list-reqs [--type <type>]" >&2
	echo "search [--type <type>] <pattern>" >&2
	echo "help" >&2
}

parse_opt(){
	local TEMP="$(getopt -o t:k:d:C:P:T:O:U:E:N:c:B:s:b --long type:,key:,days:,country:,province:,city:,organization:,unit:,email:,cname:,batch,subject:,config:,base:,brief -n "$COMMAND_NAME" -- "$@")"
	eval set -- "$TEMP"
	while true; do
		case "$1" in
			-t|--type)	CERT_TYPE="$2"; FILTER_TYPE="$2"; shift 2 ;;
			-k|--key)	CERT_KEY="$2"; shift 2;;
			-d|--days)	CERT_DAYS="$2"; shift 2;;
			-C|--country)	COUNTRY="$2"; shift 2;;
			-P|--province)	PROVINCE="$2"; shift 2;;
			-T|--city)	CITY="$2"; shift 2;;
			-O|--organization)
					ORGANIZATION="$2"; shift 2;;
			-U|--unit)	UNIT="$2"; shift 2;;
			-E|--email)	EMAIL="$2"; shift 2;;
			-N|--cname)	CNAME="$2"; shift 2;;
			-i|--brief)	echo "FIXME: not supported yet"; shift;;
			-b|--batch)	BATCH="-batch"; shift;;
			-c|--config)	echo "FIXME: not supported yet"; shift 2;;
			-B|--base)	echo "FIXME: not supported yet"; shift 2;;
			--) 		shift ; break ;;
			*) 		echo "Parse error!" ; exit 1 ;;
		esac
	done

	if [ $# -eq 0 -o $# -gt 2 ];then
		echo "Parse error!" ; usage; exit 1 ;
	fi

	COMMAND="$1"
	PARAMETER="$2"
}

check_opt(){
#basic checks

#command-specific checks
	case "$COMMAND" in
		init)	
			test -n "$PARAMETER" || { echo "Error: please provide directory to create as a parameter."; usage; exit 1; };;
		create|request|sign|show-req|show-cert|rm-req)
			test -n "$PARAMETER" || { echo "Error: please provide name as a parameter."; usage; exit 1; };;
		search)
			test -n "$PARAMETER" || { echo "Error: please provide search pattern as a parameter."; usage; exit 1; };;
	esac
	test "$COMMAND" != "init" -a "$COMMAND" != "help" -a -z "$BASE" && { echo "Error: no CA exists. Create new CA with init command."; usage; exit 1; }||true

}

parse_opt "$@"
check_opt

case "$COMMAND" in
	init)		BASE="$PARAMETER"
			db_init
			create_ca
			create_config ;;
	create-ca)	create_ca ;;
	create)		create_req "$PARAMETER"&&sign_cert "$PARAMETER";;
	request)	create_req "$PARAMETER";;
	sign)		sign_cert "$PARAMETER";;
	show-cert)	show_cert "$PARAMETER";;
	show-req)	show_req "$PARAMETER";;
	list-certs)	list_certs;;
	list-reqs)	list_reqs;;
	rm-req)		rm-req "$PARAMETER";;
	search)		search "$PARAMETER";;
	help)		usage ;;
	*)		echo "Parse error!"; usage; exit 1 ;;
esac

