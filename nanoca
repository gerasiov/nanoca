#!/bin/sh
# nanoca -- Certificate Authority tool
#
# Copyright (C) 2008 Alexander GQ Gerasiov <gq@cs.msu.su>
#
# This program is free software.  It is distributed under the terms of
# the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

set -e

# Basic configs
BASE="/home/ca/openssl"
CONFIG="${BASE}/openssl.cnf"
CA_DAYS=3653
CA_KEY="rsa:4096"
CERT_DAYS=1096
CERT_KEY="rsa:2048"

# Read user's config
if [ -f "${HOME}/.nanoca" ];then
	. "${HOME}/.nanoca"
fi

COMMAND_NAME="nanoca"

# Create certificate request.
create_cert(){
	NAME="$1"
	CSR="${BASE}/req/${NAME}.csr"
	KEY="${BASE}/private/${NAME}.pem"

	if [ -e "$CSR" ];then
		echo "Aborted: certificate already exists."
		exit 1
	fi

	openssl req -config "$CONFIG" -new -newkey $CERT_KEY -keyout "$KEY" -out "$CSR" -nodes&&\
	echo "Done."||\
	echo "Failed."
}

# Sign certificate request
sign_cert(){
	NAME="$1"

	CSR="${BASE}/req/${NAME}.csr"
	CERT="${BASE}/certs/${NAME}.pem"

	if [ ! -f "$CSR" ];then
		echo "Aborted: certificate not found."
		exit 1
	fi

	#  sign the certificate
	echo "CA signing: $CSR -> $CERT"
	openssl ca -config "$CONFIG" -out "$CERT" -infiles "$CSR" ||{ echo "Error occured."; exit 1; }

	echo "CA verifying: $CERT <-> CA cert"
	openssl verify -CAfile "${BASE}/cacert.pem" "$CERT"
}

# Generate openssl config
create_config(){
	echo "TODO"
}

# Initialize openssl infrastructure
db_init(){
	if [ -e "$BASE" ];then
		echo "Aborted: directory allready exists."
		exit 1
	fi

	mkdir -p "$BASE"
	mkdir "${BASE}/req" "${BASE}/certs" "${BASE}/newcerts" "${BASE}/private"
	chmod 700 "${BASE}/private"

	touch "${BASE}/index.txt" "${BASE}/index.txt.attr"
	echo "00" > "${BASE}/serial"
}

# Create certificate authority
create_ca(){
	openssl req -new -newkey $CA_KEY -x509 -extensions v3_ca -keyout "${BASE}private/cakey.pem" -out "${BASE}/cacert.pem" -days 3653 -config "${BASE}/openssl.cnf"
}

# Print certificate in plain text
show_text(){
	openssl x509 -in "${BASE}/$1" -text
}

usage(){
	echo "$COMMAND_NAME operation [parameter]" >&2
	echo "Operations could be:"
	echo "init <path>"
	echo "create <cert-name>"
	echo "sign <cert-name>"
	echo "help"
}

parse_opt(){
if false;then
	local TEMP=$(getopt -o ab: --long longa,longb: -n "$COMMAND_NAME" -- "$@")
	eval set -- "$TEMP"
	while true; do
		case "$1" in
			-a|--longa) A=TRUE; shift ;;
			-b|--longb) B="$2"; shift 2 ;;
			--) shift ; break ;;
			*) echo "Parse error!" ; exit 1 ;;
		esac
	done
fi

	if [ $# -eq 0 -o $# -gt 2 ];then
		echo "Parse error!" ; usage; exit 1 ;
	fi

	COMMAND="$1"
	PARAMETER="$2"
}


parse_opt $@

case "$COMMAND" in
	init)		BASE="$PARAMETER"
			echo  -e '\nBASE="'$PARAMETER'"' >> ${HOME}/.nanoca
			db_init
			create_config
			create_ca ;;
	create-ca)	create_ca ;;
	create)		create_cert "$PARAMETER";;
	sign)		sign_cert "$PARAMETER";;
	help)		usage ;;
	*)		echo "Parse error!"; usage; exit 1 ;;
esac
